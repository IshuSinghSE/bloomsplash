name: Flutter Android APK Release Build & Modular Release

on:
  push:
    tags:
      - 'v*'
    branches:
      - 'release/v*'

jobs:
  setup:
    name: Setup & Cache
    runs-on: ubuntu-latest
    outputs:
      flutter_version: ${{ steps.detect_flutter_version.outputs.flutter_version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Detect Flutter version from pubspec.yaml
        id: detect_flutter_version
        run: |
          FLUTTER_VERSION=$(grep -A 1 'environment:' pubspec.yaml | grep 'flutter:' | awk '{print $2}' | tr -d '"')
          if [ -z "$FLUTTER_VERSION" ]; then
            FLUTTER_VERSION="3.32.5"
          fi
          echo "flutter_version=$FLUTTER_VERSION" >> $GITHUB_OUTPUT
          echo "FLUTTER_VERSION=$FLUTTER_VERSION" >> $GITHUB_ENV
          echo "Detected Flutter version: $FLUTTER_VERSION"
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: gradle-${{ runner.os }}-
      - name: Cache Flutter pub cache
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: pub-cache-${{ runner.os }}-${{ hashFiles('pubspec.yaml') }}
          restore-keys: pub-cache-${{ runner.os }}-
      - name: Cache Android build intermediates
        uses: actions/cache@v4
        with:
          path: |
            build
            android/app/build
          key: android-build-${{ runner.os }}-${{ github.sha }}
          restore-keys: android-build-${{ runner.os }}-

  dependencies:
    name: Install Dependencies & Patch
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Restore caches
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.pub-cache
            build
            android/app/build
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: gradle-${{ runner.os }}-
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: ${{ needs.setup.outputs.flutter_version }}
          cache: true
      - name: Get Dependencies
        run: flutter pub get
      - name: Patch flutter_native_splash build.gradle
        run: |
          FILE="$HOME/.pub-cache/hosted/pub.dev/flutter_native_splash-2.2.16/android/build.gradle"
          grep -q "namespace 'net.jonhanson.flutter_native_splash'" "$FILE" || \
            sed -i "/^android {/a \    namespace 'net.jonhanson.flutter_native_splash'" "$FILE"

  build_apks:
    name: Build APKs
    runs-on: ubuntu-latest
    needs: dependencies
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Restore caches
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.pub-cache
            build
            android/app/build
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: gradle-${{ runner.os }}-
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: ${{ needs.setup.outputs.flutter_version }}
          cache: true
      - name: Decode Keystore
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        run: |
          echo "$ANDROID_KEYSTORE_BASE64" | base64 --decode > android/app/flutter-app-key.keystore
      - name: Create key.properties
        env:
          KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          echo "storeFile=flutter-app-key.keystore" > android/key.properties
          echo "storePassword=$KEYSTORE_PASSWORD" >> android/key.properties
          echo "keyAlias=$KEY_ALIAS" >> android/key.properties
          echo "keyPassword=$KEY_PASSWORD" >> android/key.properties
      - name: Add key.properties to gitignore
        run: echo "key.properties" >> android/.gitignore
      - name: Get Version Name
        run: |
          VERSION_NAME=$(grep 'version:' pubspec.yaml | awk '{print $2}' | cut -d'+' -f1)
          echo "APP_VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
        shell: bash
      - name: Set Build Number
        run: |
          echo "APP_BUILD_NUMBER=${{ github.run_number }}" >> $GITHUB_ENV
      - name: Show Flutter, Dart, Java versions
        run: |
          echo "Flutter version:" && flutter --version
          echo "Dart version:" && dart --version
          echo "Java version:" && java -version

      # --- Patch flutter_native_splash 2.2.16 build.gradle for correct namespace syntax ---
      - name: Ensure namespace in flutter_native_splash 2.2.16 build.gradle
        run: |
          FILE="$HOME/.pub-cache/hosted/pub.dev/flutter_native_splash-2.2.16/android/build.gradle"
          # Only add if not present
          grep -q "namespace 'net.jonhanson.flutter_native_splash'" "$FILE" || \
            sed -i "/^android {/a \    namespace 'net.jonhanson.flutter_native_splash'" "$FILE"

      # --- Build Steps ---
      - name: Build Standard Android Release APK
        run: flutter build apk --release --build-name=${{ env.APP_VERSION_NAME }} --build-number=${{ env.APP_BUILD_NUMBER }}
      - name: Build Android Split APKs for Release
        run: flutter build apk --release --split-per-abi --build-name=${{ env.APP_VERSION_NAME }} --build-number=${{ env.APP_BUILD_NUMBER }}
      - name: Upload Release APKs Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-apks
          path: build/app/outputs/flutter-apk/*.apk
          retention-days: 1

  release:
    name: Create GitHub Release and Upload Artifacts
    runs-on: ubuntu-latest
    needs: build_apks
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Download Release APKs Artifact
        uses: actions/download-artifact@v4
        with:
          name: release-apks
          path: ./apks
      - name: List APKs in ./apks for debug
        run: |
          echo "Listing APKs in ./apks after artifact download:"
          ls -lh ./apks || echo "No ./apks directory found"
          find ./apks -type f -name '*.apk' -exec ls -lh {} + || echo "No APKs found in ./apks"
      - name: Get Version Name
        run: |
          VERSION_NAME=$(grep 'version:' pubspec.yaml | awk '{print $2}' | cut -d'+' -f1)
          echo "APP_VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
        shell: bash
      - name: Set Build Number
        run: |
          echo "APP_BUILD_NUMBER=${{ github.run_number }}" >> $GITHUB_ENV
      - name: Ensure unique release version (auto-increment minor if tag exists)
        id: ensure_version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BASE_VERSION="${APP_VERSION_NAME:-0.1.0}"
          OWNER_REPO="${GITHUB_REPOSITORY}"
          VERSION="$BASE_VERSION"
          MAJOR=$(echo "$VERSION" | awk -F. '{print $1}')
          MINOR=$(echo "$VERSION" | awk -F. '{print $2}')
          PATCH=$(echo "$VERSION" | awk -F. '{print $3}')
          if [ -z "$MINOR" ]; then
            MINOR=0
          fi
          if [ -z "$PATCH" ]; then
            PATCH=0
          fi
          PREFIX="v"
          while true; do
            TAG="${PREFIX}${MAJOR}.${MINOR}.${PATCH}"
            if curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/${OWNER_REPO}/git/refs/tags/${TAG}" | grep -q '"ref":'; then
              PATCH=$((PATCH + 1))
            else
              break
            fi
          done
          VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "Using version: $VERSION"
          echo "APP_VERSION_NAME=$VERSION" >> $GITHUB_ENV
          echo "Final APP_VERSION_NAME: $VERSION"
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.APP_VERSION_NAME }}
          release_name: Release ${{ env.APP_VERSION_NAME }}
          draft: false
          prerelease: false
      - name: Find and Upload APKs to Release
        run: |
          UPLOAD_URL="${{ steps.create_release.outputs.upload_url }}"
          DOWNLOADED_APKS_DIR="./apks"
          UPLOAD_URL="${UPLOAD_URL%\{*}"
          echo "Listing APKs in $DOWNLOADED_APKS_DIR:"
          find "$DOWNLOADED_APKS_DIR" -type f -name '*.apk' -exec ls -lh {} +
          for apk_file in $(find "$DOWNLOADED_APKS_DIR" -type f -name '*.apk'); do
            if [ -f "$apk_file" ]; then
              echo "Uploading $apk_file..."
              asset_name=$(basename "$apk_file" | sed 's/^app/bloomsplash/')
              curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Content-Type: application/vnd.android.package-archive" \
                --data-binary "@${apk_file}" \
                "${UPLOAD_URL}?name=${asset_name}"
            fi
          done
        shell: bash
